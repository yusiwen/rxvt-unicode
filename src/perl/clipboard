#! perl -w

#:META:X_RESOURCE:%.copycmd:string:command expecting clip data on stdin
#:META:X_RESOURCE:%.pastecmd:string:command that writes clip data to stdout
#undocumented/deprecated #:META:X_RESOURCE:%.paste_escaped:boolean:
#:META:X_RESOURCE:%.autcopy:boolean:automatically copy on selection grab

# Author:   Bert Muennich
# Website:  http://www.github.com/muennich/urxvt-perls
# License:  GPLv2

# Use keyboard shortcuts to copy the selection to the clipboard and to paste
# the clipboard contents (optionally escaping all special characters).
# Requires xsel to be installed!

# Usage: put the following lines in your .Xdefaults/.Xresources:
#   URxvt.perl-ext-common: ...,clipboard
#   URxvt.keysym.M-c:   perl:clipboard:copy
#   URxvt.keysym.M-v:   perl:clipboard:paste
#   URxvt.keysym.M-C-v: perl:clipboard:paste_escaped

# Options:
#   URxvt.clipboard.autocopy: If true, PRIMARY overwrites clipboard

# You can also overwrite the system commands to use for copying/pasting.
# The default ones are:
#   URxvt.clipboard.copycmd:  xsel -ib
#   URxvt.clipboard.pastecmd: xsel -ob
# If you prefer xclip, then put these lines in your .Xdefaults/.Xresources:
#   URxvt.clipboard.copycmd:  xclip -i -selection clipboard
#   URxvt.clipboard.pastecmd: xclip -o -selection clipboard
# On Mac OS X, put these lines in your .Xdefaults/.Xresources:
#   URxvt.clipboard.copycmd:  pbcopy
#   URxvt.clipboard.pastecmd: pbpaste

# The use of the functions should be self-explanatory!

use strict;

sub on_start {
   my ($self) = @_;

   $self->{copy_cmd}  = $self->x_resource ('%.copycmd' ) || 'xsel -ib';
   $self->{paste_cmd} = $self->x_resource ('%.pastecmd') || 'xsel -ob';

   if ($self->x_resource_boolean ('%.autocopy')) {
      $self->enable (sel_grab => \&sel_grab);
   }

   ()
}

sub copy {
   my ($self) = @_;

   if (open my $fh, "| $self->{copy_cmd}") {
      my $sel = $self->selection;
      $sel = $self->locale_encode ($sel);
      syswrite $fh, $sel;
   } else {
      print STDERR "error running '$self->{copy_cmd}': $!\n";
   }

   ()
}

sub paste {
   my ($self, $escape) = @_;

   my $str = qx<$self->{paste_cmd}>;

   if ($? == 0) {
      $str =~ s/([!#\$%&\*\(\) ='"\\\|\[\]`~,<>\?])/\\\1/g
	if $escape;

      $self->tt_paste ($str);
   } else {
      print STDERR "error running '$self->{paste_cmd}': $!\n";
   }

   ()
}

sub on_user_command {
   my ($self, $cmd) = @_;

   if ($cmd eq "clipboard:copy") {
      $self->copy;
   } elsif ($cmd eq "clipboard:paste") {
      $self->paste (0);
   } elsif ($cmd eq "clipboard:paste_escaped") {
      $self->paste (1);
   }

   ()
}

sub sel_grab {
   my ($self) = @_;

   $self->copy;

   ()
}

