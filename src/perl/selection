#! perl

sub on_keyboard_command {
   my ($self, $cmd) = @_;

   $cmd eq "selection:rot13"
      and $self->selection (map { y/A-Za-z/N-ZA-Mn-za-m/; $_ } $self->selection);

   ()
}

# "find interetsing things"-patterns
my @mark_patterns = (
   qr{([[:alnum:]]+)},

   # common "parentheses"
   qr{(?:^|\s) ‘  ([^‘’]+?) ’ (?:\s|\)|$)}x,
   qr{(?:^|\s) `  ([^`']+?) ' (?:\s|\)|$)}x,
   qr{         \{ ([^{}]+?) \} }x,
   qr{         \[ ([^{}]+?) \] }x,

   # urls, just a heuristic
   qr{(
      (?:https?|ftp|news|mailto|file)://[ab-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27(),~]+
      [ab-zA-Z0-9\-\@;\/?:&=%\$_+!*\x27()~]   # exclude some trailing characters (heuristic)
   )}x,

   # shell-like argument quoting, basically always matches
   qr{\G [\ \t|&;<>()] *(
      (?:
         [^\\"'\ \t|&;<>()]+
         | \\.
         | " (?: [^\\"]+ | \\. )* "
         | ' [^']* '
      )+
   )}x,
);

# "correct obvious? crap"-patterns
my @simplify_patterns = (
   qr{^"([^\\"'\ \t|&;<>()*?]+)"$}, # "simple" => simple
   qr{^(.*)[,\-]$},                 # strip off trailing , and -
);

sub on_sel_extend {
   my ($self, $time) = @_;

   my ($row, $col) = $self->selection_mark;
   my $line = $self->line ($row);
   my $text = $line->t;
   my $markofs = $line->offset_of ($row, $col);
   my $curlen  = $line->offset_of ($self->selection_end)
               - $line->offset_of ($self->selection_beg);

   my @matches;

   for my $regex (@mark_patterns) {
      while ($text =~ /$regex/g) {
         if ($-[1] <= $markofs and $markofs <= $+[1]) {
            my $ofs = $-[1];
            my $match = $1;

            push @matches, [$ofs, length $match];

            for my $regex (@simplify_patterns) {
               if ($match =~ $regex) {
                  $match = $1;
                  $ofs += $-[1];
               }
            }

            push @matches, [$ofs, length $match];
         }
      }
   }

   # whole line
   push @matches, [0, ($line->end - $line->beg + 1) * $self->ncol];

   for (sort { $a->[1] <=> $b->[1] or $b->[0] <=> $a->[0] } @matches) {
      my ($ofs, $len) = @$_;

      next if $len <= $curlen;

      $self->selection_beg ($line->coord_of ($ofs));
      $self->selection_end ($line->coord_of ($ofs + $len));
      return 1;
   }

   ()
}
