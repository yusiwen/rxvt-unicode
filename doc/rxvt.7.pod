=head1 Rxvt Technical Reference

Marc Lehmann <rxvt@schmorp.de>, converted to pod and reworked from the
original Rxvt documentation by Geoff Wing <gcw@pobox.com>, who in turn used
the XTerm documentation and other sources.

=head1 Definitions

=over 4

=item B<< C<c> >>

The literal character c.

=item B<< C<C> >>

A single (required) character.

=item B<< C<Ps> >>

A single (usually optional) numeric parameter, composed of one or more
digits.

=item B<< C<Pm> >>

A multiple numeric parameter composed of any number of single numeric
parameters, separated by C<;> character(s).

=item B<< C<Pt> >>

A text parameter composed of printable characters.

=back

=head1 Values

=over 4

=item B<< C<ENQ> >>

Enquiry (Ctrl-E) = Send Device Attributes (DA)
request attributes from terminal ==

=item B<< C<BEL> >>

Bell (Ctrl-G)

=item B<< C<BS> >>

Backspace (Ctrl-H)

=item B<< C<TAB> >>

Horizontal Tab (HT) (Ctrl-I)

=item B<< C<LF> >>

Line Feed or New Line (NL) (Ctrl-J)

=item B<< C<VT> >>

Vertical Tab (Ctrl-K) same as B<< C<LF> >>

=item B<< C<FF> >>

Form Feed or New Page (NP) (Ctrl-L) same as B<< C<LF> >>

=item B<< C<CR> >>

Carriage Return (Ctrl-M)

=item B<< C<SO> >>

Shift Out (Ctrl-N), invokes the G1 character set.
Switch to Alternate Character Set

=item B<< C<SI> >>

Shift In (Ctrl-O), invokes the G0 character set (the default).
Switch to Standard Character Set

=item B<< C<SPC> >>

Space Character

=back

=head1 Escape Sequences

=over 4

=item B<< C<ESC # 8> >>

DEC Screen Alignment Test (DECALN)

=item B<< C<ESC 7> >>

Save Cursor (SC)

=item B<< C<ESC 8> >>

Restore Cursor

=item B<< C<ESC => >>

Application Keypad (SMKX). See also next sequence.

=item B<<< C<< ESC >> >>>

Normal Keypad (RMKX)

B<Note:> If the numeric keypad is activated, eg, B<Num_Lock> has been
pressed, numbers or control functions are generated by the numeric keypad
(see Key Codes).

=item B<< C<ESC D> >>

Index (IND)

=item B<< C<ESC E> >>

Next Line (NEL)

=item B<< C<ESC H> >>

Tab Set (HTS)

=item B<< C<ESC M> >>

Reverse Index (RI)

=item B<< C<ESC N> >>

Single Shift Select of G2 Character Set (SS2): affects next character
only I<unimplemented>

=item B<< C<ESC O> >>

Single Shift Select of G3 Character Set (SS3): affects next character
only I<unimplemented>

=item B<< C<ESC Z> >>

Obsolete form of returns: B<< C<ESC[?1;2C> >> I<rxvt compile-time option>

=item B<< C<ESC c> >>

Full reset (RIS)

=item B<< C<ESC n> >>

Invoke the G2 Character Set (LS2)

=item B<< C<ESC o> >>

Invoke the G3 Character Set (LS3)

=item B<< C<ESC>(C<C> >>

Designate G0 Character Set (ISO 2022), see below for values of C<C>.

=item B<< C<ESC>)C<C> >>

Designate G1 Character Set (ISO 2022), see below for values of C<C>.

=item B<< C<ESC * C> >>

Designate G2 Character Set (ISO 2022), see below for values of C<C>.

=item B<< C<ESC + C> >>

Designate G3 Character Set (ISO 2022), see below for values of C<C>.

=item B<< C<ESC $ C> >>

Designate Kanji Character Set

Where B<< C<C> >> is one of:

=begin table

	C = C<0> 	DEC Special Character and Line Drawing Set
	C = C<A> 	United Kingdom (UK)
	C = C<B> 	United States (USASCII)
	C = C<< < >>	Multinational character set I<unimplemented>
	C = C<5> 	Finnish character set I<unimplemented>
	C = C<C> 	Finnish character set I<unimplemented>
	C = C<K> 	German character set I<unimplemented>

=end table

=back

X<CSI>

=head1 CSI (Code Sequence Introducer) Sequences

=over 4

=item B<< C<ESC [ Ps @> >>

Insert B<< C<Ps> >> (Blank) Character(s) [default: 1] (ICH)X<ESCOBPsA>

=item B<< C<ESC [ Ps A> >>

Cursor Up B<< C<Ps> >> Times [default: 1] (CUU)

=item B<< C<ESC [ Ps B> >>

Cursor Down B<< C<Ps> >> Times [default: 1] (CUD)X<ESCOBPsC>

=item B<< C<ESC [ Ps C> >>

Cursor Forward B<< C<Ps> >> Times [default: 1] (CUF)

=item B<< C<ESC [ Ps D> >>

Cursor Backward B<< C<Ps> >> Times [default: 1] (CUB)

=item B<< C<ESC [ Ps E> >>

Cursor Down B<< C<Ps> >> Times [default: 1] and to first column

=item B<< C<ESC [ Ps F> >>

Cursor Up B<< C<Ps> >> Times [default: 1] and to first columnX<ESCOBPsG>

=item B<< C<ESC [ Ps G> >>

Cursor to Column B<< C<Ps> >> (HPA)

=item B<< C<ESC [ Ps;Ps H> >>

Cursor Position [row;column] [default: 1;1] (CUP)

=item B<< C<ESC [ Ps I> >>

Move forward B<< C<Ps> >> tab stops [default: 1]

=item B<< C<ESC [ Ps J> >>

Erase in Display (ED)

=begin table

	B<< C<Ps = 0> >>	Clear Below (default)
	B<< C<Ps = 1> >>	Clear Above
	B<< C<Ps = 2> >>	Clear All

=end table

=item B<< C<ESC [ Ps K> >>

Erase in Line (EL)

=begin table

	B<< C<Ps = 0> >>	Clear to Right (default)
	B<< C<Ps = 1> >>	Clear to Left
	B<< C<Ps = 2> >>	Clear All

=end table

=item B<< C<ESC [ Ps L> >>

Insert B<< C<Ps> >> Line(s) [default: 1] (IL)

=item B<< C<ESC [ Ps M> >>

Delete B<< C<Ps> >> Line(s) [default: 1] (DL)

=item B<< C<ESC [ Ps P> >>

Delete B<< C<Ps> >> Character(s) [default: 1] (DCH)

=item B<< C<ESC [ Ps;Ps;Ps;Ps;Ps T> >>

Initiate . I<unimplemented> Parameters are
[func;startx;starty;firstrow;lastrow].

=item B<< C<ESC [ Ps W> >>

Tabulator functions

=begin table

	B<< C<Ps = 0> >>	Tab Set (HTS)
	B<< C<Ps = 2> >>	Tab Clear (TBC), Clear Current Column (default)
	B<< C<Ps = 5> >>	Tab Clear (TBC), Clear All

=end table

=item B<< C<ESC [ Ps X> >>

Erase B<< C<Ps> >> Character(s) [default: 1] (ECH)

=item B<< C<ESC [ Ps Z> >>

Move backward B<< C<Ps> >> [default: 1] tab stops

=item B<< C<ESC [ Ps '> >>

==

=item B<< C<ESC [ Ps a> >>

==X<ESCOBPsc>

=item B<< C<ESC [ Ps c> >>

Send Device Attributes (DA)
B<< C<Ps = 0> >> (or omitted): request attributes from terminal
returns: B<< C<ESC[?1;2c> >> (``I am a VT100 with Advanced Video
Option'')

=item B<< C<ESC [ Ps d> >>

Cursor to Line B<< C<Ps> >> (VPA)

=item B<< C<ESC [ Ps e> >>

==

=item B<< C<ESC [ Ps;Ps f> >>

Horizontal and Vertical Position [row;column] (HVP) [default: 1;1]

=item B<< C<ESC [ Ps g> >>

Tab Clear (TBC)

=begin table

	B<< C<Ps = 0> >>	Clear Current Column (default)
	B<< C<Ps = 3> >>	Clear All (TBC)

=end table

=item B<< C<ESC [ Ps i> >>

Printing

=begin table

	B<< C<Ps = 4> >>	disable transparent print mode (MC4)
	B<< C<Ps = 5> >>	enable transparent print mode (MC5) I<unimplemented>

=end table

=item B<< C<ESC [ Pm h> >>

Set Mode (SM). See next sequence for description of C<Pm>.

=item B<< C<ESC [ Pm l> >>

Reset Mode (RM)

=over 4

=item B<< C<Ps = 4> >>

=begin table

	B<< C<h> >>	Insert Mode (SMIR)
	B<< C<l> >>	Replace Mode (RMIR)

=end table

=item B<< C<Ps = 20> >> I<unimplemented>

=begin table

	B<< C<h> >>	Automatic Newline (LNM)
	B<< C<h> >>	Normal Linefeed (LNM)

=end table

=back

=item B<< C<ESC [ Pm m> >>

Character Attributes (SGR)

=begin table

	B<< C<Ps = 0> >>	Normal (default)
	B<< C<Ps = 1 / 22> >>	On / Off Bold (bright fg)
	B<< C<Ps = 4 / 24> >>	On / Off Underline
	B<< C<Ps = 5 / 25> >>	On / Off Blink (bright bg)
	B<< C<Ps = 7 / 27> >>	On / Off Inverse
	B<< C<Ps = 30 / 40> >>	fg/bg Black
	B<< C<Ps = 31 / 41> >>	fg/bg Red
	B<< C<Ps = 32 / 42> >>	fg/bg Green
	B<< C<Ps = 33 / 43> >>	fg/bg Yellow
	B<< C<Ps = 34 / 44> >>	fg/bg Blue
	B<< C<Ps = 35 / 45> >>	fg/bg Magenta
	B<< C<Ps = 36 / 46> >>	fg/bg Cyan
	B<< C<Ps = 37 / 47> >>	fg/bg White
	B<< C<Ps = 39 / 49> >>	fg/bg Default

=end table

=item B<< C<ESC [ Ps n> >>

Device Status Report (DSR)

=begin table

	B<< C<Ps = 5> >>	Status Report B<< C<ESC [ 0 n> >> (``OK'')
	B<< C<Ps = 6> >>	Report Cursor Position (CPR) [row;column] as B<< C<ESC [ r ; c R> >>
	B<< C<Ps = 7> >>	Request Display Name
	B<< C<Ps = 8> >>	Request Version Number (place in window title)

=end table

=item B<< C<ESC [ Ps;Ps r> >>

Set Scrolling Region [top;bottom]
[default: full size of window] (CSR)

=item B<< C<ESC [ s> >>

Save Cursor (SC)

=item B<< C<ESC [ Ps x> >>

Request Terminal Parameters (DECREQTPARM)

=item B<< C<ESC [ u> >>

Restore Cursor

=back

X<PrivateModes>

=head1 DEC Private Modes

=over 4

=item B<< C<ESC [ ? Pm h> >>

DEC Private Mode Set (DECSET)

=item B<< C<ESC [ ? Pm l> >>

DEC Private Mode Reset (DECRST)

=item B<< C<ESC [ ? Pm r> >>

Restore previously saved DEC Private Mode Values.

=item B<< C<ESC [ ? Pm s> >>

Save DEC Private Mode Values.

=item B<< C<ESC [ ? Pm t> >>

Toggle DEC Private Mode Values (rxvt extension). I<where>

=over 4

=item B<< C<Ps = 1> >> (DECCKM)

=begin table

	B<< C<h> >>	Application Cursor Keys
	B<< C<l> >>	Normal Cursor Keys

=end table

=item B<< C<Ps = 2> >> (ANSI/VT52 mode)

=begin table

	B<< C<h> >>	Enter VT52 mode
	B<< C<l> >>	Enter VT52 mode

=end table

=item B<< C<Ps = 3> >>

=begin table

	B<< C<h> >>	132 Column Mode (DECCOLM)
	B<< C<l> >>	80 Column Mode (DECCOLM)

=end table

=item B<< C<Ps = 4> >>

=begin table

	B<< C<h> >>	Smooth (Slow) Scroll (DECSCLM)
	B<< C<l> >>	Jump (Fast) Scroll (DECSCLM)

=end table

=item B<< C<Ps = 5> >>

=begin table

	B<< C<h> >>	Reverse Video (DECSCNM)
	B<< C<l> >>	Normal Video (DECSCNM)

=end table

=item B<< C<Ps = 6> >>

=begin table

	B<< C<h> >>	Origin Mode (DECOM)
	B<< C<l> >>	Normal Cursor Mode (DECOM)

=end table

=item B<< C<Ps = 7> >>

=begin table

	B<< C<h> >>	Wraparound Mode (DECAWM)
	B<< C<l> >>	No Wraparound Mode (DECAWM)

=end table

=item B<< C<Ps = 8> >> I<unimplemented>

=begin table

	B<< C<h> >>	Auto-repeat Keys (DECARM)
	B<< C<l> >>	No Auto-repeat Keys (DECARM)

=end table

=item B<< C<Ps = 9> >> X10 XTerm

=begin table

	B<< C<h> >>	Send Mouse X & Y on button press.
	B<< C<l> >>	No mouse reporting.

=end table

)X<Priv10>

=item B<< C<Ps = 10> >> (B<rxvt>)

=begin table

	B<< C<h> >>	visible
	B<< C<l> >>	invisible

=end table

=item B<< C<Ps = 25> >>

=begin table

	B<< C<h> >>	Visible cursor {cnorm/cvvis}
	B<< C<l> >>	Invisible cursor {civis}

=end table

=item B<< C<Ps = 30> >>

=begin table

	B<< C<h> >>	scrollBar visisble
	B<< C<l> >>	scrollBar invisisble

=end table

=item B<< C<Ps = 35> >> (B<rxvt>)

=begin table

	B<< C<h> >>	Allow XTerm Shift+key sequences
	B<< C<l> >>	Disallow XTerm Shift+key sequences

=end table

=item B<< C<Ps = 38> >> I<unimplemented>

Enter Tektronix Mode (DECTEK)

=item B<< C<Ps = 40> >>

=begin table

	B<< C<h> >>	Allow 80/132 Mode
	B<< C<l> >>	Disallow 80/132 Mode

=end table

=item B<< C<Ps = 44> >> I<unimplemented>

=begin table

	B<< C<h> >>	Turn On Margin Bell
	B<< C<l> >>	Turn Off Margin Bell

=end table

=item B<< C<Ps = 45> >> I<unimplemented>

=begin table

	B<< C<h> >>	Reverse-wraparound Mode
	B<< C<l> >>	No Reverse-wraparound Mode

=end table

=item B<< C<Ps = 46> >> I<unimplemented>

=item B<< C<Ps = 47> >>

=begin table

	B<< C<h> >>	Use Alternate Screen Buffer
	B<< C<l> >>	Use Normal Screen Buffer

=end table

X<Priv66>

=item B<< C<Ps = 66> >>

=begin table

	B<< C<h> >>	Application Keypad (DECPAM) ==
	B<< C<l> >>	Normal Keypad (DECPNM) ==

=end table

=item B<< C<Ps = 67> >>

=begin table

	B<< C<h> >>	Backspace key sends B<< C<BS> (DECBKM) >>
	B<< C<l> >>	Backspace key sends B<< C<DEL> >>

=end table

=item B<< C<Ps = 1000> >> (X11 XTerm)

=begin table

	B<< C<h> >>	Send Mouse X & Y on button press and release.
	B<< C<l> >>	No mouse reporting.

=end table

=item B<< C<Ps = 1001> >> (X11 XTerm) I<unimplemented>

=begin table

	B<< C<h> >>	Use Hilite Mouse Tracking.
	B<< C<l> >>	No mouse reporting.

=end table

=item B<< C<Ps = 1010> >>

=begin table

	B<< C<h> >>	Don't scroll to bottom on TTY output
	B<< C<l> >>	Scroll to bottom on TTY output

=end table

=item B<< C<Ps = 1011> >>

=begin table

	B<< C<h> >>	Scroll to bottom when a key is pressed
	B<< C<l> >>	Don't scroll to bottom when a key is pressed

=end table

=item B<< C<Ps = 1047> >>

=begin table

	B<< C<h> >>	Use Alternate Screen Buffer
	B<< C<l> >>	Use Normal Screen Buffer - clear Alternate Screen Buffer if returning from it

=end table

=item B<< C<Ps = 1048> >>

=begin table

	B<< C<h> >>	Save cursor position
	B<< C<l> >>	Restore cursor position

=end table

=back

=back

X<XTerm>

=head1 XTerm Operating System Commands

=over 4

=item B<< C<ESC ] Ps;Pt ST> >>

Set XTerm Parameters. 8-bit ST: 0x9c, 7-bit ST sequence: ESC \ (0x1b,
0x5c), backwards compatible terminator BEL (0x07) is also accepted. any
B<octet> can be escaped by prefixing it with SYN (0x16, ^V).

=begin table

	B<< C<Ps = 0> >>	Change Icon Name and Window Title to B<< C<Pt> >>
	B<< C<Ps = 1> >>	Change Icon Name to B<< C<Pt> >>
	B<< C<Ps = 2> >>	Change Window Title to B<< C<Pt> >>
	B<< C<Ps = 3> >>	If B<< C<Pt> >> starts with a B<< C<?> >>, query the (STRING) property of the window and return it. If B<< C<Pt> >> contains a B<< C<=> >>, set the named property to the given value, else delete the specified property.
	B<< C<Ps = 4> >>	B<< C<Pt> >> is a semi-colon separated sequence of one or more semi-colon separated B<number>/B<name> pairs, where B<number> is an index to a colour and B<name> is the name of a colour. Each pair causes the B<number>ed colour to be changed to B<name>. Numbers 0-7 corresponds to low-intensity (normal) colours and 8-15 corresponds to high-intensity colours. 0=black, 1=red, 2=green, 3=yellow, 4=blue, 5=magenta, 6=cyan, 7=white
	B<< C<Ps = 10> >>	Change colour of text foreground to B<< C<Pt> >> B<(NB: may change in future)>
	B<< C<Ps = 11> >>	Change colour of text background to B<< C<Pt> >> B<(NB: may change in future)>
	B<< C<Ps = 12> >>	Change colour of text cursor foreground to B<< C<Pt> >>
	B<< C<Ps = 13> >>	Change colour of mouse foreground to B<< C<Pt> >>
	B<< C<Ps = 17> >>	Change colour of highlight characters to B<< C<Pt> >>
	B<< C<Ps = 18> >>	Change colour of bold characters to B<< C<Pt> >>
	B<< C<Ps = 19> >>	Change colour of underlined characters to B<< C<Pt> >>
	B<< C<Ps = 20> >>	Change default background to B<< C<Pt> >>
	B<< C<Ps = 39> >>	Change default foreground colour to B<< C<Pt> >> I<rxvt compile-time option>
	B<< C<Ps = 46> >>	Change Log File to B<< C<Pt> >> I<unimplemented>
	B<< C<Ps = 49> >>	Change default background colour to B<< C<Pt> >> I<rxvt compile-time option>
	B<< C<Ps = 50> >>	Set fontset to B<< C<Pt> >>, with the following special values of B<< C<Pt> >> (B<rxvt>) B<< C<#+n> >> change up B<< C<n> >> B<< C<#-n> >> change down B<< C<n> >> if B<< C<n> >> is missing of 0, a value of 1 is used I<empty> change to font0 B<< C<n> >> change to font B<< C<n> >>
	B<< C<Ps = 55> >>	Log all scrollback buffer and all of screen to B<< C<Pt> >>
	B<< C<Ps = 701> >>	Change current locale to B<< C<Pt> >>, or, if B<< C<Pt> >> is B<< C<?> >>, return the current locale (@@RXVTNAME@@ extension)
	B<< C<Ps = 702> >>	find font for character, used for debugging (@@RXVTNAME@@ extension)
	B<< C<Ps = 703> >>	command B<< C<Pt> >> I<rxvt compile-time option> (@@RXVTNAME@@ extension)

=end table

=back

X<menuBar>

=head1 menuBar

B<< The exact syntax used is I<almost> solidified. >>
In the menus, B<DON'T> try to use menuBar commands that add or remove a
menuBar.

Note that in all of the commands, the B<< I</path/> >> I<cannot> be
omitted: use B<./> to specify a menu relative to the current menu.

=head2 Overview of menuBar operation

For the menuBar XTerm escape sequence C<ESC ] 703 ; Pt ST>, the syntax
of C<Pt> can be used for a variety of tasks:

At the top level is the current menuBar which is a member of a circular
linked-list of other such menuBars.

The menuBar acts as a parent for the various drop-down menus, which in
turn, may have labels, separator lines, menuItems and subMenus.

The menuItems are the useful bits: you can use them to mimic keyboard
input or even to send text or escape sequences back to rxvt.

The menuBar syntax is intended to provide a simple yet robust method of
constructing and manipulating menus and navigating through the
menuBars.

The first step is to use the tag B<< [menu:I<name>] >> which creates
the menuBar called I<name> and allows access. You may now or menus,
subMenus, and menuItems. Finally, use the tag B<[done]> to set the
menuBar access as B<readonly> to prevent accidental corruption of the
menus. To re-access the current menuBar for alterations, use the tag
B<[menu]>, make the alterations and then use B<[done]>

X<menuBarCommands>

=head2 Commands

=over 4

=item B<< [menu:+I<name>] >>

access the named menuBar for creation or alteration. If a new menuBar
is created, it is called I<name> (max of 15 chars) and the current
menuBar is pushed onto the stack

=item B<[menu]>

access the current menuBar for alteration

=item B<< [title:+I<string>] >>

set the current menuBar's title to I<string>, which may contain the
following format specifiers:
B<%%> : literal B<%> character
B<%n> : rxvt name (as per the B<-name> command-line option)
B<%v> : rxvt version

=item B<[done]>

set menuBar access as B<readonly>.
End-of-file tag for B<< [read:+I<file>] >> operations.

=item B<< [read:+I<file>] >>

read menu commands directly from I<file> (extension ".menu" will be
appended if required.) Start reading at a line with B<[menu]> or B<<
[menu:+I<name> >> and continuing until B<[done]> is encountered.

Blank and comment lines (starting with B<#>) are ignored. Actually,
since any invalid menu commands are also ignored, almost anything could
be construed as a comment line, but this may be tightened up in the
future ... so don't count on it!.

=item B<< [read:+I<file>;+I<name>] >>

The same as B<< [read:+I<file>] >>, but start reading at a line with
B<< [menu:+I<name>] >> and continuing until B<< [done:+I<name>] >> or
B<[done]> is encountered.

=item B<[dump]>

dump all menuBars to the file B</tmp/rxvt-PID> in a format suitable for
later rereading.

=item B<[rm:name]>

remove the named menuBar

=item B<[rm] [rm:]>

remove the current menuBar

=item B<[rm*] [rm:*]>

remove all menuBars

=item B<[swap]>

swap the top two menuBars

=item B<[prev]>

access the previous menuBar

=item B<[next]>

access the next menuBar

=item B<[show]>

Enable display of the menuBar

=item B<[hide]>

Disable display of the menuBar

=item B<< [pixmap:+I<name>] >>

=item B<< [pixmap:+I<name>;I<scaling>] >>

(set the background pixmap globally

B<< A Future implementation I<may> make this local to the menubar >>)

=item B<< [:+I<command>:] >>

ignore the menu readonly status and issue a I<command> to or a menu or
menuitem or change the ; a useful shortcut for setting the quick arrows
from a menuBar.

=back

X<menuBarAdd>

=head2 Adding and accessing menus

The following commands may also be B<+> prefixed.

=over 4

=item B</+>

access menuBar top level

=item B<./+>

access current menu level

=item B<../+>

access parent menu (1 level up)

=item B<../../>

access parent menu (multiple levels up)

=item B<< I</path/>menu >>

add/access menu

=item B<< I</path/>menu/* >>

add/access menu and clear it if it exists

=item B<< I</path/>{-} >>

add separator

=item B<< I</path/>{item} >>

add B<item> as a label

=item B<< I</path/>{item} action >>

add/alter I<menuitem> with an associated I<action>

=item B<< I</path/>{item}{right-text} >>

add/alter I<menuitem> with B<right-text> as the right-justified text
and as the associated I<action>

=item B<< I</path/>{item}{rtext} action >>

add/alter I<menuitem> with an associated I<action> and with B<rtext> as
the right-justified text.

=back

=over 4

=item Special characters in I<action> must be backslash-escaped:

B<\a \b \E \e \n \r \t \octal>

=item or in control-character notation:

B<^@, ^A .. ^Z .. ^_, ^?>

=back

To send a string starting with a B<NUL> (B<^@>) character to the
program, start I<action> with a pair of B<NUL> characters (B<^@^@>),
the first of which will be stripped off and the balance directed to the
program. Otherwise if I<action> begins with B<NUL> followed by
non-+B<NUL> characters, the leading B<NUL> is stripped off and the
balance is sent back to rxvt.

As a convenience for the many Emacs-type editors, I<action> may start
with B<M-> (eg, B<M-$> is equivalent to B<\E$>) and a B<CR> will be
appended if missed from B<M-x> commands.

As a convenience for issuing XTerm B<ESC]> sequences from a menubar (or
quick arrow), a B<BEL> (B<^G>) will be appended if needed.

=over 4

=item For example,

B<M-xapropos> is equivalent to B<\Exapropos\r>

=item and

B<\E]703;mona;100> is equivalent to B<\E]703;mona;100\a>

=back

The option B<< {I<right-rtext>} >> will be right-justified. In the
absence of a specified action, this text will be used as the I<action>
as well.

=over 4

=item For example,

B</File/{Open}{^X^F}> is equivalent to B</File/{Open}{^X^F} ^X^F>

=back

The left label I<is> necessary, since it's used for matching, but
implicitly hiding the left label (by using same name for both left and
right labels), or explicitly hiding the left label (by preceeding it
with a dot), makes it possible to have right-justified text only.

=over 4

=item For example,

B</File/{Open}{Open} Open-File-Action>

=item or hiding it

B</File/{.anylabel}{Open} Open-File-Action>

=back

X<menuBarRemove>

=head2 Removing menus

=over 4

=item B<< -/*+ >>

remove all menus from the menuBar, the same as B<[clear]>

=item B<< -+I</path>menu+ >>

remove menu

=item B<< -+I</path>{item}+ >>

remove item

=item B<< -+I</path>{-} >>

remove separator)

=item B<-/path/menu/*>

remove all items, separators and submenus from menu

=back

X<menuBarArrows>

=head2 Quick Arrows

The menus also provide a hook for I<quick arrows> to provide easier
user access. If nothing has been explicitly set, the default is to
emulate the curror keys. The syntax permits each arrow to be altered
individually or all four at once without re-entering their common
beginning/end text. For example, to explicitly associate cursor actions
with the arrows, any of the following forms could be used:

=over 4

=item B<< <r>+I<Right> >>

=item B<< <l>+I<Left> >>

=item B<< <u>+I<Up> >>

=item B<< <d>+I<Down> >>

Define actions for the respective arrow buttons

=item B<< <b>+I<Begin> >>

=item B<< <e>+I<End> >>

Define common beginning/end parts for I<quick arrows> which used in
conjunction with the above <r> <l> <u> <d> constructs

=back

=over 4

=item For example, define arrows individually,

 <u>\E[A

 <d>\E[B

 <r>\E[C

 <l>\E[D

=item or all at once

 <u>\E[AZ<><d>\E[BZ<><r>\E[CZ<><l>\E[D

=item or more compactly (factoring out common parts)

 <b>\E[<u>AZ<><d>BZ<><r>CZ<><l>D

=back

X<menuBarSummary>

=head2 Command Summary

A short summary of the most I<common> commands:

=over 4

=item [menu:name]

use an existing named menuBar or start a new one

=item [menu]

use the current menuBar

=item [title:string]

set menuBar title

=item [done]

set menu access to readonly and, if reading from a file, signal EOF

=item [done:name]

if reading from a file using [read:file;name] signal EOF

=item [rm:name]

remove named menuBar(s)

=item [rm] [rm:]

remove current menuBar

=item [rm*] [rm:*]

remove all menuBar(s)

=item [swap]

swap top two menuBars

=item [prev]

access the previous menuBar

=item [next]

access the next menuBar

=item [show]

map menuBar

=item [hide]

unmap menuBar

=item [pixmap;file]

=item [pixmap;file;scaling]

set a background pixmap

=item [read:file]

=item [read:file;name]

read in a menu from a file

=item [dump]

dump out all menuBars to /tmp/rxvt-PID

=item /

access menuBar top level

=item ./

=item ../

=item ../../

access current or parent menu level

=item /path/menu

add/access menu

=item /path/{-}

add separator

=item /path/{item}{rtext} action

add/alter menu item

=item -/*

remove all menus from the menuBar

=item -/path/menu

remove menu items, separators and submenus from menu

=item -/path/menu

remove menu

=item -/path/{item}

remove item

=item -/path/{-}

remove separator

=item <b>Begin<r>Right<l>Left<u>Up<d>Down<e>End

menu quick arrows

=back
X<XPM>

=head1 XPM

For the XPM XTerm escape sequence B<< C<ESC ] 20 ; Pt ST> >> then value
of B<< C<Pt> >> can be the name of the background pixmap followed by a
sequence of scaling/positioning commands separated by semi-colons. The
scaling/positioning commands are as follows:

=over 4

=item query scale/position

B<?>

=item change scale and position

B<WxH+X+Y>

B<WxH+X> (== B<WxH+X+X>)

B<WxH> (same as B<WxH+50+50>)

B<W+X+Y> (same as B<WxW+X+Y>)

B<W+X> (same as B<WxW+X+X>)

B<W> (same as B<WxW+50+50>)

=item change position (absolute)

B<=+X+Y>

B<=+X> (same as B<=+X+Y>)

=item change position (relative)

B<+X+Y>

B<+X> (same as B<+X+Y>)

=item rescale (relative)

B<Wx0> -> B<W *= (W/100)>

B<0xH> -> B<H *= (H/100)>

=back

For example:

=over 4

=item B<\E]20;funky\a>

load B<funky.xpm> as a tiled image

=item B<\E]20;mona;100\a>

load B<mona.xpm> with a scaling of 100%

=item B<\E]20;;200;?\a>

rescale the current pixmap to 200% and display the image geometry in
the title

=back
X<Mouse>

=head1 Mouse Reporting

=over 4

=item B<< C<< ESC [ M <b> <x> <y> >> >>

report mouse position

=back

The lower 2 bits of B<< C<< <b> >> >> indicate the button:

=over 4

=item Button = B<< C<< (<b> - SPACE) & 3 >> >>

=begin table

	0	Button1 pressed
	1	Button2 pressed
	2	Button3 pressed
	3	button released (X11 mouse report)

=end table

=back

The upper bits of B<< C<< <b> >> >> indicate the modifiers when the
button was pressed and are added together (X11 mouse report only):

=over 4

=item State = B<< C<< (<b> - SPACE) & 60 >> >>

=begin table

	4	Shift
	8	Meta
	16	Control
	32	Double Click I<(Rxvt extension)>

=end table

Col = B<< C<< <x> - SPACE >> >>

Row = B<< C<< <y> - SPACE >> >>

=back
X<KeyCodes>

=head1 ISO 14755 support

Partial ISO 14755-support is implemented. that means that pressing

section 5.1: Control and Shift together enters unicode input
mode. Entering hex digits composes a Unicode character, pressing space or
releasing the modifiers commits the keycode and every other key cancels
the current input character.

section 5.2: Pressing and immediately releasing Control and Shift together
enters keycap entry mode for the next key: pressing a function key (tab,
return etc..) will enter the unicode character corresponding to the given
key.

=head1 Key Codes

Note: B<Shift> + B<F1>-B<F10> generates B<F11>-B<F20>

For the keypad, use B<Shift> to temporarily override Application-Keypad
setting use B<Num_Lock> to toggle Application-Keypad setting if
B<Num_Lock> is off, toggle Application-Keypad setting. Also note that
values of B<Home>, B<End>, B<Delete> may have been compiled differently on
your system.

=begin table

		B<Normal>	B<Shift>	B<Control>	B<Ctrl+Shift>
	Tab	^I	ESC [ Z	^I	ESC [ Z
	BackSpace	^H	^?	^?	^?
	Find	ESC [ 1 ~	ESC [ 1 $	ESC [ 1 ^	ESC [ 1 @
	Insert	ESC [ 2 ~	I<paste>	ESC [ 2 ^	ESC [ 2 @
	Execute	ESC [ 3 ~	ESC [ 3 $	ESC [ 3 ^	ESC [ 3 @
	Select	ESC [ 4 ~	ESC [ 4 $	ESC [ 4 ^	ESC [ 4 @
	Prior	ESC [ 5 ~	I<scroll-up>	ESC [ 5 ^	ESC [ 5 @
	Next	ESC [ 6 ~	I<scroll-down>	ESC [ 6 ^	ESC [ 6 @
	Home	ESC [ 7 ~	ESC [ 7 $	ESC [ 7 ^	ESC [ 7 @
	End	ESC [ 8 ~	ESC [ 8 $	ESC [ 8 ^	ESC [ 8 @
	Delete	ESC [ 3 ~	ESC [ 3 $	ESC [ 3 ^	ESC [ 3 @
	F1	ESC [ 11 ~	ESC [ 23 ~	ESC [ 11 ^	ESC [ 23 ^
	F2	ESC [ 12 ~	ESC [ 24 ~	ESC [ 12 ^	ESC [ 24 ^
	F3	ESC [ 13 ~	ESC [ 25 ~	ESC [ 13 ^	ESC [ 25 ^
	F4	ESC [ 14 ~	ESC [ 26 ~	ESC [ 14 ^	ESC [ 26 ^
	F5	ESC [ 15 ~	ESC [ 28 ~	ESC [ 15 ^	ESC [ 28 ^
	F6	ESC [ 17 ~	ESC [ 29 ~	ESC [ 17 ^	ESC [ 29 ^
	F7	ESC [ 18 ~	ESC [ 31 ~	ESC [ 18 ^	ESC [ 31 ^
	F8	ESC [ 19 ~	ESC [ 32 ~	ESC [ 19 ^	ESC [ 32 ^
	F9	ESC [ 20 ~	ESC [ 33 ~	ESC [ 20 ^	ESC [ 33 ^
	F10	ESC [ 21 ~	ESC [ 34 ~	ESC [ 21 ^	ESC [ 34 ^
	F11	ESC [ 23 ~	ESC [ 23 $	ESC [ 23 ^	ESC [ 23 @
	F12	ESC [ 24 ~	ESC [ 24 $	ESC [ 24 ^	ESC [ 24 @
	F13	ESC [ 25 ~	ESC [ 25 $	ESC [ 25 ^	ESC [ 25 @
	F14	ESC [ 26 ~	ESC [ 26 $	ESC [ 26 ^	ESC [ 26 @
	F15 (Help)	ESC [ 28 ~	ESC [ 28 $	ESC [ 28 ^	ESC [ 28 @
	F16 (Menu)	ESC [ 29 ~	ESC [ 29 $	ESC [ 29 ^	ESC [ 29 @
	F17	ESC [ 31 ~	ESC [ 31 $	ESC [ 31 ^	ESC [ 31 @
	F18	ESC [ 32 ~	ESC [ 32 $	ESC [ 32 ^	ESC [ 32 @
	F19	ESC [ 33 ~	ESC [ 33 $	ESC [ 33 ^	ESC [ 33 @
	F20	ESC [ 34 ~	ESC [ 34 $	ESC [ 34 ^	ESC [ 34 @
					B<Application>
	Up	ESC [ A	ESC [ a	ESC O a	ESC O A
	Down	ESC [ B	ESC [ b	ESC O b	ESC O B
	Right	ESC [ C	ESC [ c	ESC O c	ESC O C
	Left	ESC [ D	ESC [ d	ESC O d	ESC O D
	KP_Enter	^M			ESC O M
	KP_F1	ESC O P			ESC O P
	KP_F2	ESC O Q			ESC O Q
	KP_F3	ESC O R			ESC O R
	KP_F4	ESC O S			ESC O S
	XK_KP_Multiply	*			ESC O j
	XK_KP_Add	+			ESC O k
	XK_KP_Separator	,			ESC O l
	XK_KP_Subtract	-			ESC O m
	XK_KP_Decimal	.			ESC O n
	XK_KP_Divide	/			ESC O o
	XK_KP_0	0			ESC O p
	XK_KP_1	1			ESC O q
	XK_KP_2	2			ESC O r
	XK_KP_3	3			ESC O s
	XK_KP_4	4			ESC O t
	XK_KP_5	5			ESC O u
	XK_KP_6	6			ESC O v
	XK_KP_7	7			ESC O w
	XK_KP_8	8			ESC O x
	XK_KP_9	9			ESC O y

=end table

