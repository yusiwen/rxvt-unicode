=head1 NAME

rxvt-unicode (ouR XVT, unicode) - (a VT102 emulator for the X window system)

=head1 SYNOPSIS

B<@@RXVT_NAME@@> [options] [-e command [ args ]]

=head1 DESCRIPTION

B<rxvt-unicode>, version B<@@RXVT_VERSION@@>, is a colour vt102 terminal
emulator intended as an I<xterm>(1) replacement for users who do not
require features such as Tektronix 4014 emulation and toolkit-style
configurability. As a result, B<rxvt-unicode> uses much less swap space --
a significant advantage on a machine serving many X sessions.

=head1 RXVT-UNICODE VS. RXVT

Unlike the original rxvt, B<rxvt-unicode> stores all text in Unicode
internally. That means it can store and display most scripts in the
world. Being a terminal emulator, however, some things are very difficult,
especially cursive scripts such as arabic, vertically written scripts
like mongolian or scripts requiring extremely complex combining rules,
like tibetan or devenagari. Don't expect pretty output when using these
scripts. Most other scripts, latin, cyrillic, kanji, thai etc. should work
fine, though. A somewhat difficult case are left-to-right scripts, such
as hebrew: B<rxvt-unicode> adopts the view that bidirectional algorithms
belong into the application, not the terminal emulator (too many things --
such as cursor-movement while editing -- break othwerwise), but that might
change.

If you are looking for a terminal that supports more exotic scripts, let
me recommend C<mlterm>, which is a very userfriendly, lean and clean
terminal emulator. In fact, the reason rxvt-unicode was born was solely
because the author couldn't get C<mlterm> to use one font for latin1 and
another for japanese.

Therefore another design rationale was the use of multiple fonts to
display characters: The idea of a single unicode font which many other
programs force onto it's users never made sense to me: You should be able
to choose any font for any script freely.

Apart from that, rxvt-unicode is also much better internationalised than
it's predecessor, supports things such as XFT and ISO 14755 that are handy
in i18n-environments, is faster, and has a lot less bugs than the original
rxvt. This all in addition to dozens of other small improvements.

It is still faithfully following the original rxvt idea of being lean
and nice on resources: for example, you can still configure rxvt-unicode
without most of it's features to get a lean binary. It also comes with
a client/daemon pair that lets you open any number of terminal windows
from within a single process, which makes startup time very fast and
drastically reduces memory usage. See @@RXVT_NAME@@d(1) (daemon) and
@@RXVT_NAME@@c(1) (client).

It also makes technical information about escape sequences (which have
been extended) easier accessible: see @@RXVT_NAME@@(7) for technical
reference documentation (escape sequences etc.) and the FAQ section at the
end of this document.

=head1 OPTIONS

The B<@@RXVT_NAME@@> options (mostly a subset of I<xterm>'s) are listed
below. In keeping with the smaller-is-better philosophy, options may be
eliminated or default values chosen at compile-time, so options and
defaults listed may not accurately reflect the version installed on
your system. `@@RXVT_NAME@@ -h' gives a list of major compile-time options on
the I<Options> line. Option descriptions may be prefixed with which
compile option each is dependent upon. e.g. `Compile I<XIM>:' requires
I<XIM> on the I<Options> line. Note: `@@RXVT_NAME@@ -help' gives a list of all
command-line options compiled into your version.

Note that B<@@RXVT_NAME@@> permits the resource name to be used as a
long-option (--/++ option) so the potential command-line options are
far greater than those listed. For example: `@@RXVT_NAME@@ --loginShell --color1
Orange'.

The following options are available:

=over 4

=item B<-help>, B<--help>

Print out a message describing available options.

=item B<-display> I<displayname>

Attempt to open a window on the named X display (B<-d> still
respected). In the absence of this option, the display specified by the
B<DISPLAY> environment variable is used.

=item B<-geometry> I<geom>

Window geometry (B<-g> still respected); resource B<geometry>.

=item B<-rv>|B<+rv>

Turn on/off simulated reverse video; resource B<reverseVideo>.

=item B<-j>|B<+j>

Turn on/off jump scrolling; resource B<jumpScroll>.

=item B<-ip>|B<+ip>

Turn on/off inheriting parent window's pixmap. Alternative form is
B<-tr>; resource B<inheritPixmap>.

=item B<-fade> I<number>

Fade the text by the given percentage when focus is lost.

=item B<-tint> I<colour>

Tint the transparent background pixmap with the given colour when
transparency is enabled with B<-tr> or B<-ip>. See also the B<-sh>
option that can be used to brighten or darken the image in addition to
tinting it.

=item B<-sh>

I<number> Darken (0 .. 100) or lighten (-1 .. -100) the transparent
background image in addition to tinting it (i.e. B<-tint> must be
specified, too).

=item B<-bg> I<colour>

Window background colour; resource B<background>.

=item B<-fg> I<colour>

Window foreground colour; resource B<foreground>.

=item B<-pixmap> I<file[;geom]>

Compile I<XPM>: Specify XPM file for the background and also optionally
specify its scaling with a geometry string. Note you may need to add
quotes to avoid special shell interpretation of the `;' in the
command-line; resource B<backgroundPixmap>.

=item B<-cr> I<colour>

The cursor colour; resource B<cursorColor>.

=item B<-pr> I<colour>

The mouse pointer foreground colour; resource B<pointerColor>.

=item B<-pr2> I<colour>

The mouse pointer background colour; resource B<pointerColor2>.

=item B<-bd> I<colour>

The colour of the border around the text area and between the scrollbar and the text;
resource B<borderColor>.

=item B<-fn> I<fontlist>

Select the fonts to be used. This is a comma separated list of font names
that are used in turn when trying to display Unicode characters.  The
first font defines the cell size for characters; other fonts might be
smaller, but not (in general) larger. A reasonable default font list is
always appended to it. See resource B<font> for details.

See also the question "How does rxvt-unicode choose fonts?" in the FAQ
section.

=item B<-fb> I<fontlist>

Compile font-styles: The bold font list to use when bold characters are to
be printed. See resource B<boldFont> for details.

=item B<-fi> I<fontlist>

Compile font-styles: The italic font list to use when bold characters are to
be printed. See resource B<italicFont> for details.

=item B<-fbi> I<fontlist>

Compile font-styles: The bold italic font list to use when bold characters are to
be printed. See resource B<boldItalicFont> for details.

=item B<-name> I<name>

Specify the application name under which resources are to be obtained,
rather than the default executable file name. Name should not contain
`.' or `*' characters. Also sets the icon and title name.

=item B<-ls>|B<+ls>

Start as a login-shell/sub-shell; resource B<loginShell>.

=item B<-ut>|B<+ut>

Compile I<utmp>: Inhibit/enable writing a utmp entry; resource
B<utmpInhibit>.

=item B<-vb>|B<+vb>

Turn on/off visual bell on receipt of a bell character; resource
B<visualBell>.

=item B<-sb>|B<+sb>

Turn on/off scrollbar; resource B<scrollBar>.

=item B<-si>|B<+si>

Turn on/off scroll-to-bottom on TTY output inhibit; resource
B<scrollTtyOutput> has opposite effect.

=item B<-sk>|B<+sk>

Turn on/off scroll-to-bottom on keypress; resource
B<scrollTtyKeypress>.

=item B<-sw>|B<+sw>

Turn on/off scrolling with the scrollback buffer as new lines appear.
This only takes effect if B<-si> is also given; resource
B<scrollWithBuffer>.

=item B<-sr>|B<+sr>

Put scrollbar on right/left; resource B<scrollBar_right>.

=item B<-st>|B<+st>

Display normal (non XTerm/NeXT) scrollbar without/with a trough;
resource B<scrollBar_floating>.

=item B<-bc>|B<+bc>

Blink the cursor; resource B<cursorBlink>.

=item B<-iconic>

Start iconified, if the window manager supports that option.
Alternative form is B<-ic>.

=item B<-sl> I<number>

Save I<number> lines in the scrollback buffer. See resource entry for
limits; resource B<saveLines>.

=item B<-b> I<number>

Compile I<frills>: Internal border of I<number> pixels. See resource
entry for limits; resource B<internalBorder>.

=item B<-w> I<number>

Compile I<frills>: External border of I<number> pixels. Also, B<-bw>
and B<-borderwidth>. See resource entry for limits; resource
B<externalBorder>.

=item B<-bl>

Compile I<frills>: Set MWM hints to request a borderless window, i.e.
if honoured by the WM, the rxvt-unicode window will not have window
decorations; resource B<borderLess>.

=item B<-lsp> I<number>

Compile I<linespace>: Lines (pixel height) to insert between each row
of the display; resource B<linespace>.

=item B<-tn> I<termname>

This option specifies the name of the terminal type to be set in the
B<TERM> environment variable. This terminal type must exist in the
I<termcap(5)> database and should have I<li#> and I<co#> entries;
resource B<termName>.

=item B<-e> I<command [arguments]>

Run the command with its command-line arguments in the B<@@RXVT_NAME@@>
window; also sets the window title and icon name to be the basename of
the program being executed if neither I<-title> (I<-T>) nor I<-n> are
given on the command line. If this option is used, it must be the last
on the command-line. If there is no B<-e> option then the default is to
run the program specified by the B<SHELL> environment variable or,
failing that, I<sh(1)>.

=item B<-title> I<text>

Window title (B<-T> still respected); the default title is the basename
of the program specified after the B<-e> option, if any, otherwise the
application name; resource B<title>.

=item B<-n> I<text>

Icon name; the default name is the basename of the program specified
after the B<-e> option, if any, otherwise the application name;
resource B<iconName>.

=item B<-C>

Capture system console messages.

=item B<-pt> I<style>

Compile I<XIM>: input style for input method; B<OverTheSpot>,
B<OffTheSpot>, B<Root>; resource B<preeditType>.

=item B<-im> I<text>

Compile I<XIM>: input method name. resource B<inputMethod>.

=item B<-imlocale> I<string>

The locale to use for opening the IM. You can use an LC_CTYPE of e.g.
de_DE.UTF-8 for normal text processing but ja_JP.EUC-JP for the input
extension to be able to input japanese characters while staying in
another locale.

=item B<-insecure>

Enable "insecure" mode, which currently enables most of the escape
sequences that echo strings. See the resource B<insecure> for more
info.

=item B<-mod> I<modifier>

Override detection of Meta modifier with specified key: B<alt>,
B<meta>, B<hyper>, B<super>, B<mod1>, B<mod2>, B<mod3>, B<mod4>,
B<mod5>; resource I<modifier>.

=item B<-ssc>|B<+ssc>

Turn on/off secondary screen (default enabled); resource
B<secondaryScreen>.

=item B<-ssr>|B<+ssr>

Turn on/off secondary screen scroll (default enabled); resource
B<secondaryScroll>.

=item B<-xrm> I<resourcestring>

No effect on rxvt-unicode. Simply passes through an argument to be made
available in the instance's argument list. Appears in I<WM_COMMAND> in
some window managers.

=back

=head1 RESOURCES (available also as long-options)

Note: `@@RXVT_NAME@@ --help' gives a list of all resources (long
options) compiled into your version.

There are two different methods that @@RXVT_NAME@@ can use to get the
Xresource data: using the X libraries (Xrm*-functions) or internal
Xresources reader (B<~/.Xdefaults>). For the first method (ie.
B<@@RXVT_NAME@@ -h> lists B<XGetDefaults>), you can set and change the
resources using X11 tools like B<xset>. Many distribution do also load
settings from the B<~/.Xresources> file when X starts.

If compiled with internal Xresources support (i.e. B<@@RXVT_NAME@@ -h>
lists B<.Xdefaults>) then B<@@RXVT_NAME@@> accepts application defaults
set in XAPPLOADDIR/URxvt (compile-time defined: usually
B</usr/lib/X11/app-defaults/URxvt>) and resources set in
B<~/.Xdefaults>, or B<~/.Xresources> if B<~/.Xdefaults> does not exist.
Note that when reading X resources, B<@@RXVT_NAME@@> recognizes two
class names: B<XTerm> and B<URxvt>. The class name B<Rxvt> allows
resources common to both B<@@RXVT_NAME@@> and the original I<rxvt> to be
easily configured, while the class name B<URxvt> allows resources
unique to B<@@RXVT_NAME@@>, notably colours and key-handling, to be
shared between different B<@@RXVT_NAME@@> configurations. If no
resources are specified, suitable defaults will be used. Command-line
arguments can be used to override resource settings. The following
resources are allowed:

=over 4

=item B<geometry:> I<geom>

Create the window with the specified X window geometry [default 80x24];
option B<-geometry>.

=item B<background:> I<colour>

Use the specified colour as the window's background colour [default
White]; option B<-bg>.

=item B<foreground:> I<colour>

Use the specified colour as the window's foreground colour [default
Black]; option B<-fg>.

=item B<color>I<n>B<:> I<colour>

Use the specified colour for the colour value I<n>, where 0-7
corresponds to low-intensity (normal) colours and 8-15 corresponds to
high-intensity (bold = bright foreground, blink = bright background)
colours. The canonical names are as follows: 0=black, 1=red, 2=green,
3=yellow, 4=blue, 5=magenta, 6=cyan, 7=white, but the actual colour
names used are listed in the B<COLORS AND GRAPHICS> section.

Colours higher than 15 cannot be set using resources (yet), but can be
changed using an escape command (see @@RXVT_NAME@@(7)).

Colours 16-79 form a standard 4x4x4 colour cube (the same as xterm with
88 colour support). Colours 80-87 are evenly spaces grey steps.

=item B<colorBD:> I<colour>

=item B<colorIT:> I<colour>

Use the specified colour to display bold or italic characters when the
foreground colour is the default. If font styles are not available
(Compile styles) and this option is unset, reverse video is used instead.

=item B<colorUL:> I<colour>

Use the specified colour to display underlined characters when the
foreground colour is the default.

=item B<colorRV:> I<colour>

Use the specified colour as the background for reverse video
characters.

=item B<cursorColor:> I<colour>

Use the specified colour for the cursor. The default is to use the
foreground colour; option B<-cr>.

=item B<cursorColor2:> I<colour>

Use the specified colour for the colour of the cursor text. For this to
take effect, B<cursorColor> must also be specified. The default is to
use the background colour.

=item B<reverseVideo:> I<boolean>

B<True>: simulate reverse video by foreground and background colours;
option B<-rv>. B<False>: regular screen colours [default]; option
B<+rv>. See note in B<COLORS AND GRAPHICS> section.

=item B<jumpScroll:> I<boolean>

B<True>: specify that jump scrolling should be used. When scrolling
quickly, fewer screen updates are performed [default]; option B<-j>.
B<False>: specify that smooth scrolling should be used; option B<+j>.

=item B<inheritPixmap:> I<boolean>

B<True>: make the background inherit the parent windows' pixmap, giving
artificial transparency. B<False>: do not inherit the parent windows'
pixmap.

=item B<fading:> I<number>

Fade the text by the given percentage when focus is lost.

=item B<tintColor:> I<colour>

Tint the transparent background pixmap with the given colour.

=item B<shading:> I<number>

Darken (0 .. 100) or lighten (-1 .. -100) the transparent background
image in addition to tinting it.

=item B<fading:> I<number>

Scale the tint colour by the given percentage.

=item B<scrollColor:> I<colour>

Use the specified colour for the scrollbar [default #B2B2B2].

=item B<troughColor:> I<colour>

Use the specified colour for the scrollbar's trough area [default
#969696]. Only relevant for normal (non XTerm/NeXT) scrollbar.

=item B<borderColor:> I<colour>

The colour of the border around the text area and between the scrollbar
and the text.

=item B<backgroundPixmap:> I<file[;geom]>

Use the specified XPM file (note the `.xpm' extension is optional) for
the background and also optionally specify its scaling with a geometry
string B<WxH+X+Y>, in which B<"W" / "H"> specify the
horizontal/vertical scale (percent) and B<"X" / "Y"> locate the image
centre (percent). A scale of 0 displays the image with tiling. A scale
of 1 displays the image without any scaling. A scale of 2 to 9
specifies an integer number of images in that direction. No image will
be magnified beyond 10 times its original size. The maximum permitted
scale is 1000. [default 0x0+50+50]

=item B<menu:> I<file[;tag]>

Read in the specified menu file (note the `.menu' extension is
optional) and also optionally specify a starting tag to find. See the
reference documentation for details on the syntax for the menuBar.

=item B<path:> I<path>

Specify the colon-delimited search path for finding files (XPM and
menus), in addition to the paths specified by the B<RXVTPATH> and
B<PATH> environment variables.

=item B<font:> I<fontlist>

Select the fonts to be used. This is a comma separated list of font
names that are used in turn when trying to display Unicode characters.
The first font defines the cell size for characters; other fonts might
be smaller, but not larger. A reasonable default font list is always
appended to it. option B<-fn>.

Each font can either be a standard X11 core font (XLFD) name, with
optional prefix C<x:> or a Xft font (Compile xft), prefixed with C<xft:>.

In addition, each font can be prefixed with additional hints and
specifications enclosed in square brackets (C<[]>). The only available
hint currently is C<codeset=codeset-name>, and this is only used for Xft
fonts.

For example, this font resource

   URxvt*font: 9x15bold,\
               -misc-fixed-bold-r-normal--15-140-75-75-c-90-iso10646-1,\
               -misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1, \
               [codeset=JISX0208]xft:Kochi Gothic:antialias=false, \
               xft:Code2000:antialias=false

specifies five fonts to be used. The first one is C<9x15bold> (actually
the iso8859-1 version of the second font), which is the base font (because
it is named first) and thus defines the character cell grid to be 9 pixels
wide and 15 pixels high.

the second font is just used to add additional unicode characters not in
the base font, likewise the third, which is unfortunately non-bold, but
the bold version of the font does contain less characters, so this is a
useful supplement.

The third font is an Xft font with aliasing turned off, and the characters
are limited to the B<JIS 0208> codeset (i.e. japanese kanji). The font
contains other characters, but we are not interested in them.

The last font is a useful catch-all font that supplies most of the
remaining unicode characters.

=item B<boldFont:> I<fontlist>

=item B<italicFont:> I<fontlist>

=item B<boldItalicFont:> I<fontlist>

The font list to use for displaying B<bold>, I<italic> or B<< I<bold
italic> >> characters, respectively.

If specified and non-empty, then the syntax is the same as for the
B<font>-resource, and the given font list will be used as is, which makes
it possible to substitute completely different font styles for bold and
italic.

If unset (the default), a suitable font list will be synthesized by
"morphing" the normal text font list into the desired shape. If that is
not possible, replacement fonts of the desired shape will be tried.

If set, but empty, then this specific style is disabled and the normal
text font will being used for the given style.

=item B<selectstyle:> I<mode>

Set mouse selection style to B<old> which is 2.20, B<oldword> which is
xterm style with 2.20 old word selection, or anything else which gives
xterm style selection.

=item B<scrollstyle:> I<mode>

Set scrollbar style to B<rxvt>, B<plain>, B<next> or B<xterm>. B<plain> is
the author's favourite..

=item B<title:> I<string>

Set window title string, the default title is the command-line
specified after the B<-e> option, if any, otherwise the application
name; option B<-title>.

=item B<iconName:> I<string>

Set the name used to label the window's icon or displayed in an icon
manager window, it also sets the window's title unless it is explicitly
set; option B<-n>.

=item B<mapAlert:> I<boolean>

B<True>: de-iconify (map) on receipt of a bell character. B<False>: no
de-iconify (map) on receipt of a bell character [default].

=item B<visualBell:> I<boolean>

B<True>: use visual bell on receipt of a bell character; option B<-vb>.
B<False>: no visual bell [default]; option B<+vb>.

=item B<loginShell:> I<boolean>

B<True>: start as a login shell by prepending a `-' to B<argv[0]> of
the shell; option B<-ls>. B<False>: start as a normal sub-shell
[default]; option B<+ls>.

=item B<utmpInhibit:> I<boolean>

B<True>: inhibit writing record into the system log file B<utmp>;
option B<-ut>. B<False>: write record into the system log file B<utmp>
[default]; option B<+ut>.

=item B<print-pipe:> I<string>

Specify a command pipe for vt100 printer [default I<lpr(1)>]. Use
B<Print> to initiate a screen dump to the printer and B<Ctrl-Print> or
B<Shift-Print> to include the scrollback as well.

=item B<scrollBar:> I<boolean>

B<True>: enable the scrollbar [default]; option B<-sb>. B<False>:
disable the scrollbar; option B<+sb>.

=item B<scrollBar_right:> I<boolean>

B<True>: place the scrollbar on the right of the window; option B<-sr>.
B<False>: place the scrollbar on the left of the window; option B<+sr>.

=item B<scrollBar_floating:> I<boolean>

B<True>: display an rxvt scrollbar without a trough; option B<-st>.
B<False>: display an rxvt scrollbar with a trough; option B<+st>.

=item B<scrollBar_align:> I<mode>

Align the B<top>, B<bottom> or B<centre> [default] of the scrollbar
thumb with the pointer on middle button press/drag.

=item B<scrollTtyOutput:> I<boolean>

B<True>: scroll to bottom when tty receives output; option B<-si>.
B<False>: do not scroll to bottom when tty receives output; option
B<+si>.

=item B<scrollWithBuffer:> I<boolean>

B<True>: scroll with scrollback buffer when tty recieves new lines (and
B<scrollTtyOutput> is False); option B<+sw>. B<False>: do not scroll
with scrollback buffer when tty recieves new lines; option B<-sw>.

=item B<scrollTtyKeypress:> I<boolean>

B<True>: scroll to bottom when a non-special key is pressed. Special keys
are those which are intercepted by rxvt-unicode for special handling and
are not passed onto the shell; option B<-sk>. B<False>: do not scroll to
bottom when a non-special key is pressed; option B<+sk>.

=item B<saveLines:> I<number>

Save I<number> lines in the scrollback buffer [default 64]. This
resource is limited on most machines to 65535; option B<-sl>.

=item B<internalBorder:> I<number>

Internal border of I<number> pixels. This resource is limited to 100;
option B<-b>.

=item B<externalBorder:> I<number>

External border of I<number> pixels. This resource is limited to 100;
option B<-w>, B<-bw>, B<-borderwidth>.

=item B<borderLess:> I<boolean>

Set MWM hints to request a borderless window, i.e. if honoured by the
WM, the rxvt-unicode window will not have window decorations; option B<-bl>.

=item B<termName:> I<termname>

Specifies the terminal type name to be set in the B<TERM> environment
variable; option B<-tn>.

=item B<linespace:> I<number>

Specifies number of lines (pixel height) to insert between each row of
the display [default 0]; option B<-lsp>.

=item B<meta8:> I<boolean>

B<True>: handle Meta (Alt) + keypress to set the 8th bit. B<False>:
handle Meta (Alt) + keypress as an escape prefix [default].

=item B<mouseWheelScrollPage:> I<boolean>

B<True>: the mouse wheel scrolls a page full. B<False>: the mouse wheel
scrolls five lines [default].

=item B<cursorBlink:> I<boolean>

B<True>: blink the cursor. B<False>: do not blink the cursor [default];
option B<-bc>.

=item B<pointerBlank:> I<boolean>

B<True>: blank the pointer when a key is pressed or after a set number
of seconds of inactivity. B<False>: the pointer is always visible
[default].

=item B<pointerColor:> I<colour>

Mouse pointer foreground colour.

=item B<pointerColor2:> I<colour>

Mouse pointer background colour.

=item B<pointerBlankDelay:> I<number>

Specifies number of seconds before blanking the pointer [default 2].

=item B<backspacekey:> I<string>

The string to send when the backspace key is pressed. If set to B<DEC>
or unset it will send B<Delete> (code 127) or, if shifted, B<Backspace>
(code 8) - which can be reversed with the appropriate DEC private mode
escape sequence.

=item B<deletekey:> I<string>

The string to send when the delete key (not the keypad delete key) is
pressed. If unset it will send the sequence traditionally associated
with the B<Execute> key.

=item B<cutchars:> I<string>

The characters used as delimiters for double-click word selection. The
built-in default:

B<< BACKSLASH `"'&()*,;<=>?@[]{|} >>

=item B<preeditType:> I<style>

B<OverTheSpot>, B<OffTheSpot>, B<Root>; option B<-pt>.

=item B<inputMethod:> I<name>

I<name> of inputMethod to use; option B<-im>.

=item B<imLocale:> I<name>

The locale to use for opening the IM. You can use an LC_CTYPE of e.g.
de_DE.UTF-8 for normal text processing but ja_JP.EUC-JP for the input
extension to be able to input japanese characters while staying in
another locale. option B<-imlocale>.

=item B<insecure:> I<boolean>

Enables "insecure" mode. Rxvt-unicode offers some escape sequences that
echo arbitrary strings like the icon name or the locale. This could be
abused if somebody gets 8-bit-clean access to your display, wether
throuh a mail client displaying mail bodies unfiltered or though
write(1). Therefore, these sequences are disabled by default. (Note
that other terminals, including xterm, have these sequences
enabled by default). You can enable them by setting this boolean
resource or specifying B<-insecure> as an option. At the moment, this
enabled display-answer, locale, findfont, icon label and window title
requests as well as dynamic menubar dispatch.

=item B<modifier:> I<modifier>

Set the key to be interpreted as the Meta key to: B<alt>, B<meta>,
B<hyper>, B<super>, B<mod1>, B<mod2>, B<mod3>, B<mod4>, B<mod5>; option
B<-mod>.

=item B<answerbackString:> I<string>

Specify the reply rxvt-unicode sends to the shell when an ENQ (control-E)
character is passed through. It may contain escape values as described
in the entry on B<keysym> following.

=item B<secondaryScreen:> I<bool>

Turn on/off secondary screen (default enabled).

=item B<secondaryScroll:> I<bool>

Turn on/off secondary screen scroll (default enabled). If the this
option is enabled, scrolls on the secondary screen will change the
scrollback buffer and switching to/from the secondary screen will
instead scroll the screen up.

=item B<keysym.>I<sym>: I<string>

Associate I<string> with keysym I<sym> (B<0xFF00 - 0xFFFF>). It may
contain escape values (\a: bell, \b: backspace, \e, \E: escape, \n:
newline, \r: return, \t:
tab, \000: octal number) or control characters (^?: delete, ^@: null,
^A ...) and may enclosed with double quotes so that it can start or end
with whitespace. The intervening resource name B<keysym.> cannot be
omitted. This resource is only available when compiled with
KEYSYM_RESOURCE.

=back

=head1 THE SCROLLBAR

Lines of text that scroll off the top of the B<@@RXVT_NAME@@> window
(resource: B<saveLines>) and can be scrolled back using the scrollbar
or by keystrokes. The normal B<@@RXVT_NAME@@> scrollbar has arrows and
its behaviour is fairly intuitive. The B<xterm-scrollbar> is without
arrows and its behaviour mimics that of I<xterm>

Scroll down with B<Button1> (B<xterm-scrollbar>) or B<Shift-Next>.
Scroll up with B<Button3> (B<xterm-scrollbar>) or B<Shift-Prior>.
Continuous scroll with B<Button2>.

=head1 MOUSE REPORTING

To temporarily override mouse reporting, for either the scrollbar or
the normal text selection/insertion, hold either the Shift or the Meta
(Alt) key while performing the desired mouse action.

If mouse reporting mode is active, the normal scrollbar actions are
disabled -- on the assumption that we are using a fullscreen
application. Instead, pressing Button1 and Button3 sends B<ESC[6~>
(Next) and B<ESC[5~> (Prior), respectively. Similarly, clicking on the
up and down arrows sends B<ESC[A> (Up) and B<ESC[B> (Down),
respectively.

=head1 TEXT SELECTION AND INSERTION

The behaviour of text selection and insertion mechanism is similar to
I<xterm>(1).

=over 4

=item B<Selection>:

Left click at the beginning of the region, drag to the end of the
region and release; Right click to extend the marked region; Left
double-click to select a word; Left triple-click to select the entire
line.

=item B<Insertion>:

Pressing and releasing the Middle mouse button (or B<Shift-Insert>) in
an B<@@RXVT_NAME@@> window causes the current text selection to be
inserted as if it had been typed on the keyboard.

=back

=head1 CHANGING FONTS

Changing fonts (or font sizes, respectively) via the keypad is not yet
supported in rxvt-unicode. Bug me if you need this.

You can, however, switch fonts at runtime using escape sequences (and
therefore using the menubar), e.g.:

   printf '\e]701;%s\007' "9x15bold,xft:Kochi Gothic"

rxvt-unicode will automatically re-apply these fonts to the output so far.

=head1 ISO 14755 SUPPORT

ISO 14755 is a standard for entering and viewing unicode characters
and character codes using the keyboard. It consists of 4 parts. The
first part is available rxvt-unicode has been compiled with
C<--enable-frills>, the rest is available when rxvt-unicode was compiled
with C<--enable-iso14755>.

=over 4

=item 5.1: Basic method

This allows you to enter unicode characters using their hexcode.

Start by pressing and holding both C<Control> and C<Shift>, then enter
hex-digits (between one and six). Releasing C<Control> and C<Shift> will
commit the character as if it were typed directly. While holding down
C<Control> and C<Shift> you can also enter multiple characters by pressing
C<Space>, which will commit the current character and lets you start a new
one.

As an example of use, imagine a business card with a japanese e-mail
address, which you cannot type. Fortunately, the card has the e-mail
address printed as hexcodes, e.g. C<671d 65e5>. You can enter this easily
by pressing C<Control> and C<Shift>, followed by C<6-7-1-D-SPACE-6-5-E-5>,
followed by releasing the modifier keys.

=item 5.2: Keyboard symbols entry method

This mode lets you input characters representing the keycap symbols of
your keyboard, if representable in the current locale encoding.

Start by pressing C<Control> and C<Shift> together, then releasing
them. The next special key (cursor keys, home etc.) you enter will not
invoke it's usual function but instead will insert the corresponding
keycap symbol. The symbol will only be entered when the key has been
released, otherwise pressing e.g. C<Shift> would enter the symbol for
C<ISO Level 2 Switch>, although your intention might have beenm to enter a
reverse tab (Shift-Tab).

=item 5.3: Screen-selection entry method

While this is implemented already (it's basically the selection
mechanism), it could be extended by displaying a unicode character map.

=item 5.4: Feedback method for identifying displayed characters for later input

This method lets you display the unicode character code associated with
characters already displayed.

You enter this mode by holding down C<Control> and C<Shift> together, then
pressing and holding the left mouse button and moving around. The unicode
hex code(s) (it might be a combining character) of the character under the
pointer is displayed until you release C<Control> and C<Shift>.

In addition to the hex codes it will display the font used to draw this
character - due to implementation reasons, characters combined with
combining characters, line drawing characters and unknown characters will
always be drawn using the built-in support font.

=back

With respect to conformance, rxvt-unicode is supposed to be compliant to
both scenario A and B of ISO 14755, including part 5.2.

=head1 LOGIN STAMP

B<@@RXVT_NAME@@> tries to write an entry into the I<utmp>(5) file so
that it can be seen via the I<who(1)> command, and can accept messages.
To allow this feature, B<@@RXVT_NAME@@> must be installed setuid root on
some systems.

=head1 COLORS AND GRAPHICS

In addition to the default foreground and background colours,
B<@@RXVT_NAME@@> can display up to 16 colours (8 ANSI colours plus
high-intensity bold/blink versions of the same). Here is a list of the
colours with their B<rgb.txt> names.

=begin table

	B<color0>	(black)	= Black
	B<color1>	(red)	= Red3
	B<color2>	(green)	= Green3
	B<color3>	(yellow)	= Yellow3
	B<color4>	(blue)	= Blue3
	B<color5>	(magenta)	= Magenta3
	B<color6>	(cyan)	= Cyan3
	B<color7>	(white)	= AntiqueWhite
	B<color8>	(bright black)	= Grey25
	B<color9>	(bright red)	= Red
	B<color10>	(bright green)	= Green
	B<color11>	(bright yellow)	= Yellow
	B<color12>	(bright blue)	= Blue
	B<color13>	(bright magenta)	= Magenta
	B<color14>	(bright cyan)	= Cyan
	B<color15>	(bright white)	= White
	B<foreground>		= Black
	B<background>		= White

=end table

It is also possible to specify the colour values of B<foreground>,
B<background>, B<cursorColor>, B<cursorColor2>, B<colorBD>, B<colorUL> as
a number 0-15, as a convenient shorthand to reference the colour name of
color0-color15.

Note that B<-rv> (B<"reverseVideo: True">) simulates reverse video by
always swapping the foreground/background colours. This is in contrast to
I<xterm>(1) where the colours are only swapped if they have not otherwise
been specified. For example,

=over 4

=item B<@@RXVT_NAME@@ -fg Black -bg White -rv>

would yield White on Black, while on I<xterm>(1) it would yield Black
on White.

=back

=head1 FREQUENTLY ASKED QUESTIONS (FAQ)

=over 4

=item How do I know which rxvt-unicode version I'm using?

The version number is displayed with the usage (-h). Also the escape
sequence C<ESC[8n> sets the window title to the version number.

=item When I log-in to another system it tells me about missing terminfo data?

The terminal description used by rxvt-unicode is not as widely available
as that for xterm, or even rxvt (for which the same problem often arises).

The correct solution for this problem is to install the terminfo, this can be done
like this:

   infocmp rxvt-unicode >rxvt.unicode.tic
   scp rxvt-unicode.tic remotesystem:
   ssh remotesystem tic rxvt-unicode.tic
 
... or by installing rxvt-unicode normally on the remote system,

If you cannot or do not want to do this, then you can simply set
C<TERM=rxvt> or even C<TERM=xterm>, and live with the small number of
problems arising, which includes wrong keymapping, less and different
colours and some refresh errors in fullscreen applications. It's a nice
quick-and-dirty workaround for rare cases, though.

If you always want to do this you can either recompile rxvt-unicode with
the desired TERM value or use a resource to set it:

   URxvt.termName: rxvt

=item How can I configure rxvt-unicode so that it looks similar to the original rxvt?

Felix von Leitner says that these two lines, in your F<.Xdefaults>, will make rxvt-unicode
behave similar to the original rxvt:

   URxvt.font: -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso8859-1
   URxvt.boldFont: -misc-fixed-bold-r-semicondensed--13-120-75-75-c-60-iso8859-1

=item Rxvt-unicode does not seem to understand the selected encoding?

=item Unicode does not seem to work?

If you encounter strange problems like typing an accented character but
getting two unrelated other characters or similar, or if program output is
subtly garbled, then you should check your locale settings.

Rxvt-unicode must be started with the same C<LC_CTYPE> setting as the
programs. Often rxvt-unicode is started in the C<C> locale, while the
login script running within the rxvt-unicode window changes the locale to
sth. else, e.h. C<en_GB.UTF-8>. Needless to say, this is not going to work.

The best thing is to fix your startup environment, as you will likely run
into other problems. If nothing works you can try this in your .profile.

  printf '\e]701;%s\007' "$LC_CTYPE"

If this doesn't work, then maybe you use a C<LC_CTYPE> specification not
supported on your systems. Some systems have a C<locale> comamnd which
displays this. If it displays sth. like:

  locale: Cannot set LC_CTYPE to default locale: ...

Then the locale you specified is not supported on your system.

If nothing works and you are sure that everything is set correctly then
you will need to remember a little known fact: Some programs just don't
support locales :(

=item Why do the characters look ugly?

=item How does rxvt-unicode choose fonts?

Most fonts do not contain the full range of Unicode, which is
fine. Chances are that the font you (or the admin/package maintainer of
your system/os) have specified does not cover all the characters you want
to display.

B<rxvt-unicode> makes a best-effort try at finding a replacement
font. Often the result is fine, but sometimes the chosen font looks
bad. Many fonts have totally strange characters that don't resemble the
correct glyph at all, and rxvt-unicode lacks the artificial intelligence
to detetc that a specific glyph is wrong: it has to believe the font that
the characters it contains indeed look correct.

In that case, select a font of your taste and add it to the font list,
e.g.:

   @@RXVT_NAME@@ -fn basefont,font2,font3...

When rxvt-unicode sees a character, it will first look at the base
font. If the base font does not contain the character, it will go to the
next font, and so on. Specifying your own fonts will also speed up this
search and use less resources within rxvt-unicode and the X-server.

The only limitation is that all the fonts must not be larger than the base
font, as the base font defines the principial cell size, which must be the
same due to the way terminals work.

=item Why do some chinese characters look so different than others?

This is because there is a difference between script and language --
rxvt-unicode does not know which language the text that is output
is, as it only knows the unicode character codes. If rxvt-unicode
first sees a japanese character, it might choose a japanese font for
it. Subseqzuent japanese characters will take that font. Now, many chinese
characters aren't represented in japanese fonts, so when the first
non-japanese character comes up, rxvt-unicode will look for a chinese font
-- unfortunately at this point, it will still use the japanese font for
japanese characters that are also chinese.

The workaround is easy: just tag a chinese font at the end of your font
list (see the previous question). The key is to view the font list as
a preference list: If you expect more japanese, list a japanese font
first. If you expect more chinese, put a chinese font first.

In the future it might be possible to switch preferences at runtime (the
internal data structure has no problem with using different fonts for
the same character at the same time, but no interface for this has been
designed yet).

=item How can I keep rxvt-unicode from using reverse video so much?

First of all, make sure you are running with the right terminfo
(C<urxvt>), which will get rid of most of these effects. Then make sure
you have specified colours for italic and bold, as otherwise rxvt-unicode
might use reverse video to simulate the effect:

   URxvt*colorBD:  white
   URxvt*colorIT:  green

=item Some programs assume totally weird colours (red instead of blue), how can I fix that?

For some unexplainable reason, some programs (i.e. irssi) assume a very
weird colour palette when confronted with a terminal with more than the
standard 8 colours (rxvt-unicode supports 88). The right fix is, of
course, to fix these programs not to assume non-ISO colours without very
good reasons.

In the meantime, you can either edit your C<urxvt> terminfo definition to
only claim 8 colour support or use C<TERM=rxvt>, which will fix colours
but keep you from using other rxvt-unicode features.

=item How does rxvt-unicode determine the encoding to use?

=item Is there an option to switch encodings?

Unlike some other terminals, rxvt-unicode has no encoding switch, and no
specific "utf-8" mode, such as xterm. In fact, it doesn't even know about
UTF-8 or any other encodings with respect to terminal I/O.

The reasons is that there exists a perfectly fine mechanism for selecting
the encoding, doing I/O and (most important) communicating this to all
applications so everybody agrees on character properties such as width and
code number. This mechanism is the I<locale>.

Rxvt-unicode uses the C<LC_CTYPE> locale category to select encoding. All
programs doing the same (that is, most) will automatically agree in the
interpretation of characters.

Unfortunately, there is no system-independent way to select locales, nor
is there a standard on how locale specifiers will look like.

On most systems, the content of the C<LC_CTYPE> environment variable
contains an arbitrary string which corresponds to an already-installed
locale. Common names for locales are C<en_US.UTF-8>, C<de_DE.ISO-8859-15>,
C<ja_JP.EUC-JP>, i.e. C<language_country.encoding>, but other forms
(i.e. C<de> or C<german>) are also common.

Rxvt-unicode ignores all other locale categories, and except for
the encoding, ignores country or language-specific settings,
i.e. C<de_DE.UTF-8> and C<ja_JP.UTF-8> are the same for rxvt-unicode.

If you want to use a specific encoding you have to make sure you start
rxvt-unicode with the correct C<LC_CTYPE> category.

=item Can I switch locales at runtime?

Yes, using an escape sequence. Try sth. like this, which sets
rxvt-unicode's idea of C<LC_CTYPE>.

  printf '\e]701;%s\007' ja_JP.SJIS

See also the previous question.

Sometimes this capability is rather handy when you want to work in one
locale (e.g. C<de_DE.UTF-8>) but some programs don't support UTF-8. For
example, I use this script to start C<xjdic>, which first switches to a
locale supported by xjdic and back later:

   printf '\e]701;%s\007' ja_JP.SJIS
   xjdic -js
   printf '\e]701;%s\007' de_DE.UTF-8

=item Can I switch the fonts at runtime?

Yes, using an escape sequence. Try sth. like this, which has the same
effect as using the C<-fn> switch, and takes effect immediately:

   printf '\e]50;%s\007' "9x15bold,xft:Kochi Gothic"

This is useful if you e.g. work primarily with japanese (and prefer a
japanese font), but you have to switch to chinese temporarily, where
japanese fonts would only be in your way.

You can think of this as a kind of manual ISO-2022 switching.

=item Why do italic characters look as if clipped?

Many fonts have difficulties with italic characters and hinting. For
example, the otherwise very nicely hinted font C<xft:Bitstream Vera Sans
Mono> completely fails in it's italic face. A workaround is to enable
freetype autohinting, i.e. like this:

   URxvt*italicFont:        xft:Bitstream Vera Sans Mono:italic:autohint=true
   URxvt*boldItalicFont:    xft:Bitstream Vera Sans Mono:bold:italic:autohint=true

=item My input method wants <some encoding> but I want UTF-8, what can I do?

You cna specify separate locales for the input method and the rest of the
terminal, using the resource C<imlocale>:

   URxvt*imlocale: ja_JP.EUC-JP

Now you can start your terminal with C<LC_CTYPE=ja_JP.UTF-8> and still
use your input method. Please note, however, that you will not be able to
input characters outside C<EUC-JP> in a normal way then, as your input
method limits you.

=item Rxvt-unicode uses gobs of memory, how can I reduce that?

Rxvt-unicode tries to obey the rule of not charging you for sth. you
don't use. One thing you should try is to configure out all settings that
you don't need, for example, Xft support is a resource hog by design,
when used. Compiling it out ensures that no Xft font will be loaded
accidentally when rxvt-unicode tries to find a font for your characters.

Also, many people (me included) like large windows and even larger
scrollback buffers: Without C<--enable-unicode3>, rxvt-unicode will use
6 bytes per screen cell. For a 160x?? window this amounts to almost a
kilobyte per line. A scorllback buffer of 10000 lines will then (if full)
use 10 Megabytes of memory. With C<--enable-unicode3> it gets worse, as
rxvt-unicode then uses 8 bytes per screen cell.

=item Can I speed up Xft rendering somehow?

Yes, the most obvious way to speed it up is to avoid Xft entirely, as
it is simply slow. If you still want Xft fonts you might try to disable
antialiasing (by appending C<:antialiasing=false>), which saves lots of
memory and also speeds up rendering considerably.

=item Rxvt-unicode doesn't seem to anti-alias its fonts, what is wrong?

Rxvt-unicode will use whatever you specify as a font. If it needs to
fall back to it's default font search list it will prefer X11 core
fonts, because they are small and fast, and then use Xft fonts. It has
antialiaisng disabled for most of them, because the author thinks they
look best that way.

If you want antialiasing, you have to specify the fonts manually.

=item Mouse cut/paste suddenly no longer works.

Make sure that mouse reporting is actually turned off since killing
some editors prematurely may leave the mouse in mouse report mode. I've
heard that tcsh may use mouse reporting unless it otherwise specified. A
quick check is to see if cut/paste works when the Alt or Shift keys are
depressed. See @@RXVT_NAME@@(7)

=item What's with this bold/blink stuff?

If no bold colour is set via C<colorBD:>, bold will invert text using the
standard foreground colour.

For the standard background colour, blinking will actually make the
text blink when compiled with C<--enable-blinking>. with standard
colours. Without C<--enable-blinking>, the blink attribute will be
ignored.

On ANSI colours, bold/blink attributes are used to set high-intensity
foreground/background colors.

color0-7 are the low-intensity colors.

color8-15 are the corresponding high-intensity colors.

=item I don't like the screen colors.  How do I change them?

You can change the screen colors at run-time using F<~/.Xdefaults>
resources (or as long-options).

Here are values that are supposed to resemble a VGA screen,
including the murky brown that passes for low-intensity yellow:

   Rxvt*color0:   #000000
   Rxvt*color1:   #A80000
   Rxvt*color2:   #00A800
   Rxvt*color3:   #A8A800
   Rxvt*color4:   #0000A8
   Rxvt*color5:   #A800A8
   Rxvt*color6:   #00A8A8
   Rxvt*color7:   #A8A8A8
                  
   Rxvt*color8:   #000054
   Rxvt*color9:   #FF0054
   Rxvt*color10:  #00FF54
   Rxvt*color11:  #FFFF54
   Rxvt*color12:  #0000FF
   Rxvt*color13:  #FF00FF
   Rxvt*color14:  #00FFFF
   Rxvt*color15:  #FFFFFF

=item What's with the strange Backspace/Delete key behaviour?

Assuming that the physical Backspace key corresponds to the
BackSpace keysym (not likely for Linux ... see the following
question) there are two standard values that can be used for
Backspace: C<^H> and C<^?>.

Historically, either value is correct, but rxvt-unicode adopts the debian
policy of using C<^?> when unsure, because it's the one only only correct
choice :).

Rxvt-unicode tries to inherit the current stty settings and uses the value
of `erase' to guess the value for backspace.  If rxvt-unicode wasn't
started from a terminal (say, from a menu or by remote shell), then the
system value of `erase', which corresponds to CERASE in <termios.h>, will
be used (which may not be the same as your stty setting).

For starting a new rxvt-unicode:

   # use Backspace = ^H
   $ stty erase ^H
   $ @@RXVT_NAME@@

   # use Backspace = ^?
   $ stty erase ^?
   $ @@RXVT_NAME@@

Toggle with "ESC[36h" / "ESC[36l" as documented in @@RXVT_NAME@@(7).

For an existing rxvt-unicode:

   # use Backspace = ^H
   $ stty erase ^H
   $ echo -n "^[[36h"

   # use Backspace = ^?
   $ stty erase ^?
   $ echo -n "^[[36l"

This helps satisfy some of the Backspace discrepancies that occur, but
if you use Backspace = C<^H>, make sure that the termcap/terminfo value
properly reflects that.

The Delete key is a another casualty of the ill-defined Backspace problem.
To avoid confusion between the Backspace and Delete keys, the Delete
key has been assigned an escape sequence to match the vt100 for Execute
(ESC[3~) and is in the supplied termcap/terminfo.

Some other Backspace problems:

some editors use termcap/terminfo,
some editors (vim I'm told) expect Backspace = ^H,
GNU Emacs (and Emacs-like editors) use ^H for help.

Perhaps someday this will all be resolved in a consistent manner.

=item I don't like the key-bindings.  How do I change them?

There are some compile-time selections available via configure. Unless
you have run "configure" with the C<--disable-resources> option you can
use the `keysym' resource to alter the keystrings associated with keysym
0xFF00 - 0xFFFF (function, cursor keys, etc).

Here's an example for a tn3270 session started using `@@RXVT_NAME@@ -name tn3270'

   !#  ----- special uses ------:
   ! tn3270 login, remap function and arrow keys.
   tn3270*font:      *clean-bold-*-*--15-*

   ! keysym - used by rxvt only
   ! Delete - ^D
   tn3270*keysym.0xFFFF:      \004

   ! Home - ^A
   tn3270*keysym.0xFF50:      \001
   ! Left - ^B
   tn3270*keysym.0xFF51:      \002
   ! Up - ^P
   tn3270*keysym.0xFF52:      \020
   ! Right - ^F
   tn3270*keysym.0xFF53:      \006
   ! Down - ^N
   tn3270*keysym.0xFF54:      \016
   ! End - ^E
   tn3270*keysym.0xFF57:      \005

   ! F1 - F12
   tn3270*keysym.0xFFBE:      \e1
   tn3270*keysym.0xFFBF:      \e2
   tn3270*keysym.0xFFC0:      \e3
   tn3270*keysym.0xFFC1:      \e4
   tn3270*keysym.0xFFC2:      \e5
   tn3270*keysym.0xFFC3:      \e6
   tn3270*keysym.0xFFC4:      \e7
   tn3270*keysym.0xFFC5:      \e8
   tn3270*keysym.0xFFC6:      \e9
   tn3270*keysym.0xFFC7:      \e0
   tn3270*keysym.0xFFC8:      \e-
   tn3270*keysym.0xFFC9:      \e=

   ! map Prior/Next to F7/F8
   tn3270*keysym.0xFF55:      \e7
   tn3270*keysym.0xFF56:      \e8

=item I'm using keyboard model XXX that has extra Prior/Next/Insert keys.
How do I make use of them?  For example, the Sun Keyboard type 4
has the following mappings that rxvt-unicode doesn't recognize.

   KP_Insert == Insert
   F22 == Print
   F27 == Home
   F29 == Prior
   F33 == End
   F35 == Next

Rather than have rxvt-unicode try to accomodate all the various possible keyboard
mappings, it is better to use `xmodmap' to remap the keys as required for
your particular machine.

=item How do I distinguish if I'm running rxvt-unicode or a regular xterm?
I need this to decide about setting colors etc.

rxvt and rxvt-unicode always export the variable "COLORTERM", so you can
check and see if that is set. Note that several programs, JED, slrn,
Midnight Commander automatically check this variable to decide whether or
not to use color.

=item How do I set the correct, full IP address for the DISPLAY variable?

If you've compiled rxvt-unicode with DISPLAY_IS_IP and ahve enabled
insecure mode then it is possible to use the following shell script
snippets to correctly set the display. If your version of rxvt-unicode
wasn't also compiled with ESCZ_ANSWER (as assumed in these snippets) then
the COLORTERM variable can be used to distinguish rxvt-unicode from a
regular xterm.

Courtesy of Chuck Blake <cblake@BBN.COM> with the following shell script
snippets:

   # Bourne/Korn/POSIX family of shells:
   [ ${TERM:-foo} = foo ] && TERM=xterm # assume an xterm if we don't know
   if [ ${TERM:-foo} = xterm ]; then
      stty -icanon -echo min 0 time 15 # see if enhanced rxvt or not
      echo -n '^[Z'
      read term_id
      stty icanon echo
      if [ ""${term_id} = '^[[?1;2C' -a ${DISPLAY:-foo} = foo ]; then
         echo -n '^[[7n'     	# query the rxvt we are in for the DISPLAY string
         read DISPLAY     	# set it in our local shell
      fi
   fi

=item How do I compile the manual pages for myself?

You need to have a recent version of perl installed as F</usr/bin/perl>,
one that comes with F<pod2man>, F<pod2text> and F<pod2html>. Then go to
the doc subdirectory and enter C<make alldoc>.

=back

=head1 ENVIRONMENT

B<@@RXVT_NAME@@> sets the environment variables B<TERM>, B<COLORTERM>
and B<COLORFGBG>. The environment variable B<WINDOWID> is set to the X
window id number of the B<@@RXVT_NAME@@> window and it also uses and
sets the environment variable B<DISPLAY> to specify which display
terminal to use. B<@@RXVT_NAME@@> uses the environment variables
B<RXVTPATH> and B<PATH> to find XPM files.

=head1 FILES

=over 4

=item B</etc/utmp>

System file for login records.

=item B</usr/lib/X11/rgb.txt>

Color names.

=back

=head1 SEE ALSO

@@RXVT_NAME@@(7), xterm(1), sh(1), resize(1), X(1), pty(4), tty(4), utmp(5)

=head1 BUGS

Check the BUGS file for an up-to-date list.

Cursor change support is not yet implemented.

Click-and-drag doesn't work with X11 mouse report overriding.

=head1 CURRENT PROJECT COORDINATOR

=over 4

=item Project Coordinator

@@RXVT_MAINT@@ L<@@RXVT_MAINTEMAIL@@>

=item Web page maintainter

@@RXVT_WEBMAINT@@ L<@@RXVT_WEBMAINTEMAIL@@>

L<@@RXVT_WEBPAGE@@>

=back

=head1 AUTHORS

=over 4

=item John Bovey

University of Kent, 1992, wrote the original Xvt.

=item Rob Nation L<< <nation@rocket.sanders.lockheed.com> >>

very heavily modified Xvt and came up with Rxvt

=item Angelo Haritsis L<< <ah@doc.ic.ac.uk> >>

wrote the Greek Keyboard Input (no longer in code)

=item mj olesen L<< <olesen@me.QueensU.CA> >>

Wrote the menu system.

Project Coordinator (changes.txt 2.11 to 2.21)

=item Oezguer Kesim L<< <kesim@math.fu-berlin.de> >>

Project Coordinator (changes.txt 2.21a to 2.4.5)

=item Geoff Wing L<< <gcw@pobox.com> >>

Rewrote screen display and text selection routines. Project Coordinator
(changes.txt 2.4.6 - rxvt-unicode)

=item Marc Alexander Lehmann L<< <rxvt@schmorp.de> >>

Forked rxvt-unicode, rewrote most of the display code and internal
character handling to store text in unicode, improve xterm
compatibility and apply numerous other bugfixes and extensions.

Project Coordinator (Changes 1.0 -)

=back

